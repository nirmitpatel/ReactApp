import React, { Component } from 'react';
//import styled from 'styled-components';

import classes from './App.css';
import Person from './Person/Person';
//import Radium, {StyleRoot} from 'radium';

/*const StyledButton = styled.button`
  background-color: ${props => props.alt ? 'red' : 'green'};
  color: white;
  font: inherit;
  border: 1px solid blue;
  padding: 8px;
  cursor: pointer;
  
  &:hover {
    background-color: ${props => props.alt ? 'salmon' : 'lightgreen'};
    color: black;
  }
`;*/

class App extends Component {
  state = {
    persons: [
      {id: '1', name: 'Max', age: 28},
      {id: '2', name: 'Nirmit', age: 26},
      {id: '3', name: 'Aditi', age: 25}
    ],
    otherState: 'some other value',
    showPersons: false
  };

  nameChangeHandler = (event, id) => {
    const personIndex = this.state.persons.findIndex(p => {
      return p.id === id;
    });

    const person = {
      ...this.state.persons[personIndex]
    };

    //Below is alternative approach for the above
    // const person = Object.assign({}, this.state.persons[personIndex]);

    person.name = event.target.value;
    const persons = [...this.state.persons];
    persons[personIndex] = person;

    this.setState ({persons:persons});
  };

  deletePersonHandler = (personIndex) => {
    //slice and ... both copies the data at the pointer. The code still works without adding them
    //but it's just a good practice to make a copy before modifying data
    //const persons = this.state.persons.slice();
    const persons = [...this.state.persons];
    persons.splice(personIndex, 1);
    this.setState({persons: persons});
  };

  togglePersonsHandler = () => {
    const doesShow = this.state.showPersons;
    this.setState({showPersons: !doesShow});
  };

  render() {
    /*const style = {
      backgroundColor: 'green',
      color: 'white',
      font: 'inherit',
      border: '1px solid blue',
      padding: '8px',
      cursor: 'pointer',
      ':hover': {
        backgroundColor: 'lightgreen',
        color: 'black'
      }
    };*/

    let persons = null;
    let btnClass = '';

    if (this.state.showPersons) {
      persons = (
        <div>
          {this.state.persons.map((person, index) => {
            return (
				<Person
	                click = {() => this.deletePersonHandler(index)}
	                name = {person.name}
	                age = {person.age}
	                key = {person.id}
	                changed = {(event) => this.nameChangeHandler(event, person.id)}
            />
		);
          })}
        </div>
      );
      // style.backgroundColor = 'red';
      // style[':hover'] = {
      //   backgroundColor: 'salmon',
      //   color: 'black'
      // };
		btnClass = classes.Red;
    }

    const assignedClasses = [];
    if (this.state.persons.length <= 2) {
      assignedClasses.push(classes.red); // classes = ['red']
    }
    if (this.state.persons.length <= 1) {
      assignedClasses.push(classes.bold); // classes = ['red', 'bold']
    }

    return (
        // <StyleRoot>
        <div className="App">
          <h1>Hi, I'm a React App.</h1>
          <p className={classes.join(' ')}>This is really working.</p>
          <button className = "button"
            onClick={this.togglePersonsHandler}>Toggle Persons
          </button>
          {persons}
        </div>
       // </StyleRoot>
    )
  }
  
  //return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Hi, my name is Nirmit.'));
  }

export default App;
